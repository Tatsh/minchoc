[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[project]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Typing :: Typed",
  "Environment :: Web Environment",
  "Intended Audience :: Information Technology",
  "Framework :: Django",
  "Intended Audience :: System Administrators",
  "Topic :: System :: Software Distribution",
]
description = "Minimal Chocolatey-compatible NuGet server in a Django app."
dynamic = ["dependencies", "requires-python"]
keywords = ["chocolatey", "django", "windows"]
license = "MIT"
name = "minchoc"
readme = "README.md"
version = "0.0.11"

[[project.authors]]
email = "audvare@gmail.com"
name = "Andrew Udvare"

[project.scripts]

[project.urls]
Issues = "https://github.com/Tatsh/minchoc/issues"
documentation = "https://minchoc.readthedocs.org"
homepage = "https://tatsh.github.io/minchoc/"
repository = "https://github.com/Tatsh/minchoc"

[tool.commitizen]
tag_format = "v$version"
version_files = [
  ".wiswa.jsonnet",
  "CITATION.cff",
  "README.md",
  "docs/index.rst",
  "package.json",
  "minchoc/__init__.py",
]
version_provider = "pep621"

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]
omit = [
  "conftest.py",
  "tests.py",
  "tests/test_*.py",
  "migrations/*",
  "parsetab.py",
  "test_django*/*",
  "wsgi.py",
]
show_missing = true

[tool.coverage.run]
branch = true
omit = [
  "conftest.py",
  "tests.py",
  "tests/test_*.py",
  "migrations/*",
  "parsetab.py",
  "test_django*/*",
  "wsgi.py",
]

[tool.django-stubs]
django_settings_module = "minchoc"
ignore_missing_settings = true

[tool.djlint]
max_line_length = 100
no_line_after_yaml = true
preserve_blank_lines = true
preserve_leading_space = true
profile = "jinja"
use_gitignore = true

[tool.doc8]
max-line-length = 100

[tool.mypy]
cache_dir = "~/.cache/mypy"
exclude = ["^minchoc/parsetab.py$"]
explicit_package_bases = true
mypy_path = "./.stubs"
platform = "linux"
plugins = ["mypy_django_plugin.main"]
python_version = "3.10"
show_column_numbers = true
strict = true
strict_optional = true
warn_unreachable = true

[tool.poetry.dependencies]
defusedxml = "^0.7.1"
django = "^5.2.6"
django-stubs-ext = "^5.2.5"
ply = "^3.11"
python = ">=3.10,<3.14"
typing-extensions = "^4.15.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
commitizen = "^4.9.1"
django-stubs = "^5.2.5"
djlint = "^1.36.4"
mypy = "^1.18.1"
ruff = "^0.13.0"
yapf = "^0.43.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
autodoc-pydantic = "^2.2.0"
doc8 = "^2.0.0"
docutils = "^0.21.2"
esbonio = "^0.16.5"
numpydoc = "^1.9.0"
restructuredtext-lint = "^1.4.0"
sphinx-click = "^6.0.0"
sphinx-datatables = "^0.3.0"
sphinx-hoverxref = "^1.4.2"
sphinx-immaterial = "^0.13.6"

[tool.poetry.group.docs.dependencies.enum-tools]
extras = ["sphinx"]
version = "^0.13.0"

[[tool.poetry.group.docs.dependencies.sphinx]]
python = ">=3.11"
version = "^8.2.0"

[[tool.poetry.group.docs.dependencies.sphinx]]
python = "<3.11"
version = "^7.2.5"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
mock = "^5.2.0"
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
pytest-django = "^4.11.1"
pytest-mock = "^3.15.0"

[tool.poetry.group.tests.dependencies.coveralls]
python = "<3.13"
version = "^4.0.1"

[[tool.poetry.packages]]
include = "minchoc"

[tool.pyright]
deprecateTypingAliases = true
enableExperimentalFeatures = true
include = ["./minchoc", "./tests"]
pythonPlatform = "Linux"
pythonVersion = "3.10"
reportCallInDefaultInitializer = "warning"
reportImplicitOverride = "warning"
reportImportCycles = "error"
reportMissingModuleSource = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "none"
typeCheckingMode = "off"
useLibraryCodeForTypes = false

[tool.pytest.ini_options]
mock_use_standalone_module = true
norecursedirs = ["node_modules"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]

[tool.ruff]
cache-dir = "~/.cache/ruff"
extend-exclude = ["migrations", "parsetab.py"]
force-exclude = true
line-length = 100
namespace-packages = ["docs", "tests"]
target-version = "py310"
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
  "A",
  "AIR",
  "ANN",
  "ARG",
  "ASYNC",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "CPY",
  "D",
  "DJ",
  "DOC",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  "FAST",
  "FBT",
  "FIX",
  "FLY",
  "FURB",
  "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  "N",
  "NPY",
  "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TC",
  "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "A005",
  "ANN401",
  "ARG001",
  "ARG002",
  "ARG004",
  "C901",
  "COM812",
  "CPY001",
  "D201",
  "D203",
  "D204",
  "D212",
  "DOC201",
  "EM101",
  "N818",
  "PLR0912",
  "PLR0913",
  "PLR0914",
  "PLR0915",
  "PLR0917",
  "PLR1702",
  "PLR6301",
  "S101",
  "S404",
  "S603",
  "TD002",
  "TD003",
  "TD004",
  "UP046",
  "UP047",
]
preview = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.flake8-self]
extend-ignore-names = ["_base_manager", "_default_manager", "_meta"]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
from-first = true
required-imports = ["from __future__ import annotations"]
section-order = ["future", "standard-library", "third-party", "local-folder"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.yapf]
align_closing_bracket_with_visual_indent = true
allow_multiline_dictionary_keys = false
allow_multiline_lambdas = false
allow_split_before_dict_value = true
blank_line_before_class_docstring = false
blank_line_before_module_docstring = false
blank_line_before_nested_class_or_def = false
blank_lines_around_top_level_definition = 2
coalesce_brackets = true
column_limit = 100
continuation_align_style = "SPACE"
continuation_indent_width = 4
dedent_closing_brackets = false
disable_ending_comma_heuristic = false
each_dict_entry_on_separate_line = true
indent_dictionary_value = true
indent_width = 4
join_multiple_lines = true
no_spaces_around_selected_binary_operators = false
space_between_ending_comma_and_closing_bracket = false
spaces_around_default_or_named_assign = false
spaces_around_power_operator = true
spaces_before_comment = 2
split_all_comma_separated_values = false
split_arguments_when_comma_terminated = false
split_before_bitwise_operator = true
split_before_closing_bracket = true
split_before_dict_set_generator = true
split_before_dot = false
split_before_expression_after_opening_paren = false
split_before_first_argument = false
split_before_logical_operator = true
split_before_named_assigns = true
split_complex_comprehension = false
split_penalty_after_opening_bracket = 30
split_penalty_after_unary_operator = 10000
split_penalty_before_if_expr = 0
split_penalty_bitwise_operator = 300
split_penalty_comprehension = 80
split_penalty_excess_character = 7000
split_penalty_for_added_line_split = 30
split_penalty_import_names = 0
split_penalty_logical_operator = 300
use_tabs = false

[tool.yapfignore]
ignore_patterns = ["node_modules/**"]
